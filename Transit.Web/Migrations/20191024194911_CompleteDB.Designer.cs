// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transit.Web.Data;

namespace Transit.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191024194911_CompleteDB")]
    partial class CompleteDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Transit.Web.Data.Entities.Agent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20);

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Transit.Web.Data.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("NumberLicencia")
                        .HasMaxLength(20);

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Transit.Web.Data.Entities.Vehicle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DateSoatEnd");

                    b.Property<DateTime>("DateSoatStar");

                    b.Property<DateTime>("DateTecnoEnd");

                    b.Property<DateTime>("DateTecnoStar");

                    b.Property<int?>("Ownerid");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("TypeVehicle")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("id");

                    b.HasIndex("Ownerid");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Transit.Web.Data.Entities.VehicleImage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<int?>("Vehicleid");

                    b.HasKey("id");

                    b.HasIndex("Vehicleid");

                    b.ToTable("VehicleImages");
                });

            modelBuilder.Entity("Transit.Web.Models.Data.Entities.Owner", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20);

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("LicenseId");

                    b.HasKey("id");

                    b.HasIndex("LicenseId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Transit.Web.Data.Entities.Vehicle", b =>
                {
                    b.HasOne("Transit.Web.Models.Data.Entities.Owner", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("Ownerid");
                });

            modelBuilder.Entity("Transit.Web.Data.Entities.VehicleImage", b =>
                {
                    b.HasOne("Transit.Web.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleImages")
                        .HasForeignKey("Vehicleid");
                });

            modelBuilder.Entity("Transit.Web.Models.Data.Entities.Owner", b =>
                {
                    b.HasOne("Transit.Web.Data.Entities.License", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId");
                });
#pragma warning restore 612, 618
        }
    }
}
